#!/usr/bin/python
"""
This is a simple cgi that implements tic tac toe game logic in python.
It implements a very lightweight interface for the game with exactly
one api call.  it returns a simple json document.

Strategy lifted from http://en.wikipedia.org/wiki/Tic-tac-toe
"""

import cgi
import cgitb

cgitb.enable()

# noinspection SpellCheckingInspection,SpellCheckingInspection
'''
the board is stored as a list of ints, 0 for unclaimed, 1, for claimed by X, 2 for claimed by o (oh).

  0 | 1 | 2
 ---+---+---
  3 | 4 | 5
 ---+---+---
  6 | 7 | 8
'''

'''
here is a list of winning combinations.  These are organized as the horizontal rows, top to bottom,
the vertical rows, right to left, then the upper-left to lower-right diagonal, finally, the upper-left
to lower-right diagonal
'''
winners = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]
'''
this is a list of all possible forks that involve a particular square on the board.
the list is indexed by the spot number, the contents of the list are lists of winning combinations of spots.
'''
fork_finder = [[0, 3, 6], [0, 4], [0, 5, 7], [1, 3], [1, 4, 6, 7], [1, 5], [2, 3, 7], [2, 4], [2, 5, 6]]

'''
these are spots the computer will take if no other advantage can be found.  These are ordered on the
odds of a square being a winning square; the center square is in the most combinations (4), the corners
are all in 3 combinations, and the edges have the least winning combinations.
'''
preferred_moves = [4, 0, 2, 6, 8, 1, 3, 5, 7]

'''
keys for the rest interface
'''
computerKey = 'computer'
boardKey = 'board'


def is_game_won(board):
    """
    figure out if the game is won
    :param board:
    :return: zero if not won, 3 for a draw, else the player number.
    """
    for winner in winners:
        if board[winner[0]] == board[winner[1]] and board[winner[0]] == board[winner[2]]:
            return board[winner[0]]
    zeros = 0
    for square in board:
        if square == 0:
            zeros += 1
    if zeros == 0:
        return 3
    return 0


def find_winning_move(board, player):
    """
    look for a winning move.
    :param board:
    :param player:
    :return: the spot number or -1 if a winner cannot be found
    """
    for winner in winners:
        if board[winner[0]] == player and board[winner[1]] == player and board[winner[2]] == 0:
            return winner[2]
        if board[winner[0]] == player and board[winner[1]] == 0 and board[winner[2]] == player:
            return winner[1]
        if board[winner[0]] == 0 and board[winner[1]] == player and board[winner[2]] == player:
            return winner[0]
    return -1


def find_forcing_moves(board, player, opponents_forking_moves, opponents_favorable_moves):
    """
    find a square that will force the opponent to play defensively
    :param board:
    :param player:
    :param opponents_forking_moves:
    :param opponents_favorable_moves:
    :return: the square that will put the opponent on defense
    """
    forcing_moves = []

    for winner in winners:
        choices = []
        found = False
        for test in winner:
            if test not in opponents_forking_moves:
                if board[test] == 0:
                    choices.append(test)
                if board[test] == player:
                    found = True
        if found and len(choices) == 2:
            for square in choices:
                if square not in forcing_moves:
                    forcing_moves.append(square)

    best_moves = []
    for square in forcing_moves:
        if square in opponents_favorable_moves:
            best_moves.append(square)
    if len(best_moves) == 0:
        for square in forcing_moves:
            if square not in opponents_favorable_moves:
                best_moves.append(square)

    sorted_best_moves = []
    for square in preferred_moves:
        if square in best_moves:
            sorted_best_moves.append(square)

    return sorted_best_moves


def find_favorable_moves(board, player, opponent):
    favorable_moves = []
    for square in preferred_moves:
        if board[square] == player:
            for winner in winners:
                if square in winner:
                    if board[winner[0]] != opponent and board[winner[2]] != opponent and board[winner[2]] != opponent:
                        for good_move in winner:
                            if good_move not in favorable_moves and good_move != square:
                                favorable_moves.append(good_move)
    return favorable_moves


def is_forking_square(board, square, player, opponent):
    """
    check to see if a square can be used to generate a fork for player player
    :param board:
    :param square:
    :param player:
    :param opponent:
    :return: true if a fork can be made
    """
    wins = 0
    for winner in fork_finder[square]:
        my_squares = 0
        opponents_squares = 0
        for line_square in winners[winner]:
            if board[line_square] == opponent:
                opponents_squares += 1
            if board[line_square] == player:
                my_squares += 1
        if my_squares != 0 and opponents_squares == 0:
            wins += 1
    return wins > 1


def find_forking_moves(board, empty, player, opponent):
    """
    try to find out if there is a square that can be taken to create a fork
    :param board:
    :param empty:
    :param player:
    :param opponent:
    :return: a list of squares that will create a fork
    """
    forking_moves = []
    for square in empty:
        if is_forking_square(board, square, player, opponent):
            forking_moves.append(square)
    return forking_moves


def try_to_win(board, player, opponent):
    """
    pick a spot on the board to try to win the game
    :param board:
    :param player:
    :param opponent:
    :return: the number of the square the computer wants to play
    """
    empty = []
    for i in preferred_moves:
        if board[i] == 0:
            empty.append(i)

    if len(empty) == 9:  # computer has first move
        return 0  # always take corner

    if len(empty) == 8:  # computer has 2nd move
        if board[4] == 0:
            return 4  # take center if empty
        else:
            return 0  # else take corner

    # can computer win now?  if so, do it.
    winning_move = find_winning_move(board, player)
    if winning_move >= 0:
        return winning_move

    # can opponent win now? of so, block.
    blocking_move = find_winning_move(board, opponent)
    if blocking_move >= 0:
        return blocking_move

    # can computer make a forking move now?
    forking_moves = find_forking_moves(board, empty, player, opponent)
    if len(forking_moves) > 0:
        return forking_moves[0]

    # find opponent's forks
    forking_moves = find_forking_moves(board, empty, opponent, player)

    # find opponents' favorable moves
    opponents_favorable_moves = find_favorable_moves(board, opponent, player)
    forcing_moves = find_forcing_moves(board, player, forking_moves, opponents_favorable_moves)

    if len(forcing_moves) > 0:
        return forcing_moves[0]

    if len(forking_moves) > 0:
        return forking_moves[0]

    for test_move in preferred_moves:
        if board[test_move] == 0:
            return test_move

    return -1  # this should never happen


form = cgi.FieldStorage()

print('Content-type:text/json\r\n')
computerString = form.getvalue(computerKey, '')
boardString = form.getvalue(boardKey, '')

if computerString == "" or boardString == "":
    print('{"error": "missing data"}')
else:
    s = form[boardKey].value
    computerPlayer = int(computerString)
    if len(boardString) != 9:
        print('{"error": "invalid board data"}')
    else:
        playBoard = []
        for c in boardString:
            playBoard.append(int(c))

        if computerPlayer == 2:
            humanPlayer = 1
        else:
            humanPlayer = 2

        won = is_game_won(playBoard)

        if won != 0:
            print('{"winner":%d, "board":"%s"}' % (won, boardString))
        else:
            move = try_to_win(playBoard, computerPlayer, humanPlayer)
            if move > -1:
                playBoard[move] = computerPlayer
            boardString = ''
            for spot in playBoard:
                boardString += '%d' % spot
            won = is_game_won(playBoard)
            if won != 0:
                print('{"move":%d, "player":%d, "winner":%d, "board":"%s"}' % (move, computerPlayer, won, boardString))
            else:
                print('{"move":%d, "player":%d, "board":"%s"}' % (move, computerPlayer, boardString))
